#!/usr/bin/python3

import sys, os
from functools import partial

from PyQt5.QtWidgets import QApplication, QMainWindow, QMessageBox
from PyQt5 import uic
from PyQt5.QtSql import QSqlDatabase


from libgcode import face
from libgcode import grid
from libgcode import cannedcycle
from libgcode import pocket
from libgcode import drillchart
from libgcode import millchart
from libgcode import tap
from libgcode import thread
from libgcode import utilities
from libgcode import develop

if os.path.split(sys.argv[0])[0] == '/usr/bin':
	GUI_PATH = '/usr/lib/libgcode'
	print('Installed')
	DEVEL = False

if os.path.split(sys.argv[0])[0] == '.':
	GUI_PATH = os.path.split(os.path.realpath(sys.argv[0]))[0]
	print('In Development')
	DEVEL = True

class main(QMainWindow):
	def __init__(self):
		super().__init__()
		uic.loadUi(os.path.join(GUI_PATH, 'gcode.ui'), self)
		self.setGeometry(50, 50, 500, 300)
		self.setWindowTitle("G code Generator")
		self.setupConnections()
		utilities.getSettings(self)
		#db = QSqlDatabase.addDatabase('QSQLITE')
		#db.setDatabaseName(GUI_PATH + 'threads.db')
		#if db.open():
		#	print("Connection success !")
		#else:
		#	print("Connection failed !\n{}".format(db.lastError().text()))
		self.devel = False
		if DEVEL:
			self.devel = True
			self.cannedToolLE.setText('1')
			self.cannedRetractLE.setText('0.250')
			self.cannedRpmLE.setText('675')
			self.cannedDepthLE.setText('-1.250')
			self.cannedFeedLE.setText('5')
			self.cannedCoordPTE.appendPlainText('X1.0 Y-1.0 Z-1.75')
			self.cannedCoordPTE.appendPlainText('X2.0 Y-1.0 Z-1.75')
			self.cannedCoordPTE.appendPlainText('X3.0 Y-1.0 Z-1.75')
			#develop.face(self)
			#face.generate(self)
			#develop.pocket(self)
			#pocket.generate(self)
		self.show()


	#def mousePressEvent(self, e):
	#	self.selectAll()      

	def setupConnections(self):
		self.saveSettingsPB.pressed.connect(partial(utilities.saveSettings, self))

		self.faceGeneratePB.pressed.connect(partial(face.generate, self))
		self.faceCopyPB.pressed.connect(partial(face.copy, self))
		self.faceSavePB.pressed.connect(partial(face.save, self))

		self.pocketGeneratePB.pressed.connect(partial(pocket.generate, self))
		self.pocketCopyPB.pressed.connect(partial(pocket.copy, self))
		self.pocketSavePB.pressed.connect(partial(pocket.save, self))

		self.cannedCycleBG.buttonClicked.connect(partial(cannedcycle.update, self))
		self.cannedSelectPB.pressed.connect(partial(cannedcycle.get, self))
		self.cannedGeneratePB.pressed.connect(partial(cannedcycle.gcode, self))
		self.cannedXcoordLE.returnPressed.connect(partial(cannedcycle.xcoord, self))
		self.cannedYcoordLE.returnPressed.connect(partial(cannedcycle.ycoord, self))


		self.drillUnitsBG.buttonClicked.connect(partial(drillchart.update, self))
		self.drillMaterialBG.buttonClicked.connect(partial(drillchart.update, self))
		self.drillDepthBG.buttonClicked.connect(partial(drillchart.populate, self))
		self.drillSfmSB.valueChanged.connect(partial(drillchart.populate, self))
		self.drilliprSB.valueChanged.connect(partial(drillchart.populate, self))
		self.drillMachineCB.currentIndexChanged.connect(partial(drillchart.update, self))

		self.millUnitsBG.buttonClicked.connect(partial(millchart.update, self))
		self.millMaterialBG.buttonClicked.connect(partial(millchart.update, self))
		self.millSfmSB.valueChanged.connect(partial(millchart.populate, self))
		self.millToothsSB.valueChanged.connect(partial(millchart.populate, self))
		self.millChipLoadFactorDSB.valueChanged.connect(partial(millchart.populate, self))
		self.millMachineCB.currentIndexChanged.connect(partial(millchart.update, self))

		self.pocketExitPB.pressed.connect(self.close)
		#self.drillSelectPB.pressed.connect(partial(hole.drill, self))

	def setupVariables(self):
		self.s1018 = []
		self.sa2d2 = []
		self.cast = []
		self.aluminum = []
		self.brass = []

	def errorMsgOk(self, text, title=None):
		msgBox = QMessageBox()
		msgBox.setIcon(QMessageBox.Warning)
		msgBox.setWindowTitle(title)
		msgBox.setText(text)
		msgBox.setStandardButtons(QMessageBox.Ok)
		returnValue = msgBox.exec()

if __name__ == '__main__':
	app = QApplication(sys.argv)
	gui = main()
	sys.exit(app.exec_())
