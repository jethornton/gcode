#!/usr/bin/python3

import sys, os
from functools import partial

from PyQt5.QtWidgets import (QApplication, QMainWindow, QMessageBox,
	QPlainTextEdit,QTextEdit, QGridLayout)
from PyQt5.QtGui import QTextCharFormat, QFont
from PyQt5 import uic, QtWidgets
from PyQt5.QtCore import pyqtSignal

#from PyQt5.QtSql import QSqlDatabase


from libgcode import face
from libgcode import grid
from libgcode import cancycle
from libgcode import pocket
from libgcode import drillchart
from libgcode import millchart
from libgcode import tap
from libgcode import thread
from libgcode import gcode
from libgcode import utilities
from libgcode import develop
from libgcode import helptext
from libgcode.help import Ui_Dialog as helpDialog


if os.path.split(sys.argv[0])[0] == '/usr/bin':
	GUI_PATH = '/usr/lib/libgcode'
	print('Installed')
	DEVEL = False

if os.path.split(sys.argv[0])[0] == '.':
	GUI_PATH = os.path.split(os.path.realpath(sys.argv[0]))[0]
	print('In Development')
	DEVEL = True

class editor(QTextEdit):
	clicked = pyqtSignal()
	def mouseReleaseEvent(self, event):
		self.clicked.emit()

class main(QMainWindow):
	def __init__(self):
		super().__init__()
		uic.loadUi(os.path.join(GUI_PATH, 'gcode.ui'), self)
		self.setGeometry(50, 50, 500, 300)
		self.setWindowTitle("G code Generator")
		utilities.getSettings(self)
		self.helpInfo = helptext.descriptions

		self.facePTE = editor()
		faceGrid = QGridLayout()
		faceGrid.addWidget(self.facePTE, 0, 0)
		self.faceingFM.setLayout(faceGrid)

		self.pocketPTE = editor()
		pocketGrid = QGridLayout()
		pocketGrid.addWidget(self.pocketPTE, 0, 0)
		self.pocketFM.setLayout(pocketGrid)

		self.gcodePTE = editor()
		gcodeGrid = QGridLayout()
		gcodeGrid.addWidget(self.gcodePTE, 0, 0)
		self.gcodeFM.setLayout(gcodeGrid)

		self.drillChartPTE = editor()
		#drillChartfmt = QTextCharFormat()
		#drillChartFont = QFont()
		#drillChartFont.setFamily('monospace [Sans Mono]')
		#drillChartFont.setFixedPitch(True)
		#drillChartfmt.setFont(drillChartFont)
		self.drillChartPTE.setFontFamily('Courier Bold')
		self.drillChartPTE.setFontPointSize(12)
		drillChartGrid = QGridLayout()
		drillChartGrid.addWidget(self.drillChartPTE, 0, 0)
		self.drillChartFM.setLayout(drillChartGrid)

		#db = QSqlDatabase.addDatabase('QSQLITE')
		#db.setDatabaseName(GUI_PATH + 'threads.db')
		#if db.open():
		#	print("Connection success !")
		#else:
		#	print("Connection failed !\n{}".format(db.lastError().text()))
		self.devel = False
		if DEVEL:
			self.devel = True
			#develop.face(self)
			#face.generate(self)
			#develop.pocket(self)
			#pocket.generate(self)
			#develop.canned(self)
		self.setupConnections()

		self.show()


	#def mousePressEvent(self, e):
	#	self.selectAll()      

	def setupConnections(self):
		self.saveSettingsPB.clicked.connect(partial(utilities.saveSettings, self))

		self.faceGeneratePB.clicked.connect(partial(face.generate, self))
		self.faceCopyPB.clicked.connect(partial(face.copy, self))
		self.faceRemovePB.clicked.connect(partial(face.delete, self))
		self.faceSavePB.clicked.connect(partial(face.save, self))
		self.faceSendPB.clicked.connect(partial(face.send, self))
		self.facePTE.clicked.connect(partial(face.selectLine, self))

		self.pocketGeneratePB.clicked.connect(partial(pocket.generate, self))
		self.pocketCopyPB.clicked.connect(partial(pocket.copy, self))
		self.pocketSavePB.clicked.connect(partial(pocket.save, self))
		self.pocketSendPB.clicked.connect(partial(pocket.send, self))
		self.pocketPTE.clicked.connect(partial(pocket.selectLine, self))

		self.canCycleBG.buttonClicked.connect(partial(cancycle.update, self))
		self.canSelectPB.clicked.connect(partial(cancycle.get, self))
		self.canGeneratePB.clicked.connect(partial(cancycle.gcode, self))
		self.canXcoordLE.returnPressed.connect(partial(cancycle.xcoord, self))
		self.canYcoordLE.returnPressed.connect(partial(cancycle.ycoord, self))
		self.canCopyPB.clicked.connect(partial(cancycle.copy, self))
		self.canCoordRemovePB.clicked.connect(partial(cancycle.deleteCoord, self))
		self.canGcodeRemovePB.clicked.connect(partial(cancycle.deleteGcode, self))
		self.canSendPB.clicked.connect(partial(cancycle.send, self))

		self.drillUnitsBG.buttonClicked.connect(partial(drillchart.update, self))
		self.drillMaterialBG.buttonClicked.connect(partial(drillchart.update, self))
		self.drillDepthBG.buttonClicked.connect(partial(drillchart.populate, self))
		self.drillSfmSB.valueChanged.connect(partial(drillchart.populate, self))
		self.drilliprSB.valueChanged.connect(partial(drillchart.populate, self))
		self.drillMachineCB.currentIndexChanged.connect(partial(drillchart.update, self))
		#self.drillPTE.clicked.connect(partial(drillchart.select, self))

		self.millUnitsBG.buttonClicked.connect(partial(millchart.update, self))
		self.millMaterialBG.buttonClicked.connect(partial(millchart.update, self))
		self.millSfmSB.valueChanged.connect(partial(millchart.populate, self))
		self.millToothsSB.valueChanged.connect(partial(millchart.populate, self))
		self.millChipLoadFactorDSB.valueChanged.connect(partial(millchart.populate, self))
		self.millMachineCB.currentIndexChanged.connect(partial(millchart.update, self))

		#self.drillSelectPB.pressed.connect(partial(hole.drill, self))

		self.gcodeCopyPB.clicked.connect(partial(gcode.copy, self))
		self.gcodeRemovePB.clicked.connect(partial(gcode.delete, self))
		self.gcodeInsertPB.clicked.connect(partial(gcode.insert, self))
		self.gcodeDeleteAllPB.clicked.connect(partial(gcode.deleteAll, self))
		self.gcodeAddM2PB.clicked.connect(partial(gcode.addM2, self))
		self.gcodePTE.clicked.connect(partial(gcode.selectLine, self))
		#self.gcodePTE.clicked.connect(lambda: print('clicked'))
		self.gcodeLineNumPB.clicked.connect(partial(gcode.addLineNum, self))

		#self.drillChartPTE.clicked.connect(partial(drillchart.selectLine, self))


		self.actionTabHelp.triggered.connect(self.help)

	def setupVariables(self):
		self.s1018 = []
		self.sa2d2 = []
		self.cast = []
		self.aluminum = []
		self.brass = []

	def errorMsgOk(self, text, title=None):
		msgBox = QMessageBox()
		msgBox.setIcon(QMessageBox.Warning)
		msgBox.setWindowTitle(title)
		msgBox.setText(text)
		msgBox.setStandardButtons(QMessageBox.Ok)
		returnValue = msgBox.exec()

	def help(self, index = False):
		dialog = QtWidgets.QDialog()
		dialog.ui = helpDialog()
		dialog.ui.setupUi(dialog)
		if index:
			dialog.ui.helpPTE.setPlainText(self.helpInfo(index))
		else:
			index = self.tabWidget.currentIndex()
			if index == 3:
				print(self.canCycleBG.checkedButton())
				if self.canCycleBG.checkedButton() is None:
					print('here')
					dialog.ui.helpPTE.setPlainText(self.helpInfo(30))
				else:
					tab = {'G81':31, 'G82':32, 'G83':33, 'G84':34, 'G85':35,
						'G86':36, 'G89':39}
					cycle = self.canCycleBG.checkedButton().text()
					dialog.ui.helpPTE.setPlainText(self.helpInfo(tab[cycle]))
			else:
				dialog.ui.helpPTE.setPlainText(self.helpInfo(self.tabWidget.currentIndex()))
		dialog.exec_()


if __name__ == '__main__':
	app = QApplication(sys.argv)
	gui = main()
	sys.exit(app.exec_())
